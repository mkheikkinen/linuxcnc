component uniref;

// full round : 2.4 / 6 tools = 0.4
// lock amount 0.22


pin in bit tool_prepare 	"Receives signal for tool change prepare";
pin out bit tool_prepared         "Sends signal when tool prepared";

pin in bit start_change;
pin out bit tool_changed         "Sends signal when tool change finished";



pin in float tool_ref_amount=0.4;
pin in float toold_lock_amount=0.225;

pin in signed selected_tool=5; // 0-5
pin in bit ref_sensor;

pin in float pos_fb;

pin out float pos_out;
pin out bit locked;
pin out bit pos_reset=false;

pin out bit out_enable=false;

pin out unsigned mode=0; // 1:init 2:referencing 3:referenced 4: moving to tool pos 5: locking 6: locked


param r float pos_prev = 0;
param r unsigned tool_prev = 0;

param r bit start_change_prev = false;

function _;
license "GPL"; // indicates GPL v2 or later
;;

#include <rtapi_math.h>

hal_bit_t fequal(hal_float_t a, hal_float_t b)
{
 return fabs(a-b) < 0.01;
}

FUNCTION(_) {

	if(tool_prepare) {
		tool_prepared=true;
	} else {
		tool_prepared=false;
	}



        // Start toolchange
        if(0==mode && start_change) {
		locked = false;
		if(ref_sensor){
			out_enable = true;
			pos_out = pos_out + 0.3; // Ask to move off the sensor
		} else {
			mode=1;
		}
                return;
        }


	// Wait for ref signal raise
	if(1==mode && start_change) {	

		// Start referencing
		mode = 2;
		out_enable = true;
		pos_out = pos_out + 4; // Ask to move full round
		return;
	} 

	// homed
	if(2==mode && ref_sensor) {
		mode=3; // referenced
		//out_enable = false;
		pos_reset=true;
		pos_out=0;
		return;
	}

        // referenced , fb reseted
        if(3==mode && 0==pos_fb) {
                pos_reset=false;
                mode=4;
		pos_out = (selected_tool-1) * tool_ref_amount;
                return;
        }	


	// In right tool position, enable reverse locking 
	if(4==mode && fequal(pos_fb, pos_out) ) {
		pos_out = pos_out - toold_lock_amount;
		mode=5;
		return;
	}

	// locked
	if(5==mode && fequal(pos_fb, pos_out)) {
		mode=6;
		locked = true;
		tool_changed=true;
		return;
	}
	if(6==mode && !start_change) {
		mode=1;
		tool_changed=false;
		return;
	}
}
